name: main

on:
  push:
    branches:
      - main

jobs:
  image-tag:
    runs-on: ubuntu-22.04
    outputs:
      tag: ${{ steps.tag.outputs.TAG }}
    steps:
      - uses: actions/checkout@v3
      - id: tag
        run: |
          TAG=main-$(git rev-parse --short HEAD)
          echo "::notice title=Docker Image Tag::${TAG}"
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
  build-image:
    name: Build and Push Image
    runs-on: ubuntu-22.04
    needs:
      - image-tag
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: arm64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/django:${{ needs.image-tag.outputs.tag }},ghcr.io/${{ github.repository }}/django:main-latest
  build-mock-server:
    name: Build Mock Server
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    needs:
      - image-tag
    steps:
      - uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: mock/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/mock-api:${{ needs.image-tag.outputs.tag }},ghcr.io/${{ github.repository }}/mock-api:main-latest
  generate-test-data:
    name: Generate Test Data
    runs-on: ubuntu-22.04
    needs:
      - image-tag
      - build-image
    container:
      image: ghcr.io/${{ github.repository }}/django:${{ needs.image-tag.outputs.tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
      volumes:
        - ${GITHUB_WORKSPACE}:/usr/app
    steps:
      - uses: actions/checkout@v3
      - name: Migrate database
        run: python /usr/app/manage.py migrate
      - name: Create test user
        run: |
          echo 'from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.create_user("test", "test@rama.io", "password")' | python /usr/app/manage.py shell
      - name: Upload sqlite database
        uses: actions/upload-artifact@v3
        with:
          name: db.sqlite3
          path: /tmp/db.sqlite3
  run-contract-tests:
    name: Run Contract Tests
    runs-on: ubuntu-22.04
    needs:
      - image-tag
      - build-image
      - generate-test-data
    services:
      django:
        image: ghcr.io/${{ github.repository }}/django:${{ needs.image-tag.outputs.tag }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        volumes:
          - /tmp/db.sqlite3:/usr/app/db.sqlite3
          - /tmp/openapi.yaml:/usr/app/api/docs/openapi.yaml
    container:
      image: apiaryio/dredd:14.0.0
      volumes:
        - /tmp/openapi.yaml:/api/openapi.yaml
    steps:
      - name: Download sqlite database
        uses: actions/download-artifact@v3
        with:
          name: db.sqlite3
          path: /tmp/db.sqlite3
      - name: Run tests
        run: dredd /api/openapi.yaml http://django:8000
